# -*- coding: utf-8 -*-
"""nnpractice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f0q5Izsr_RLgCwY7GhJ0d9qPtYNfF305
"""

import matplotlib.pyplot as plt
import cv2
digit=cv2.imread('sev.jpg')
plt.imshow(digit)

digit=cv2.cvtColor(digit,cv2.COLOR_BGR2GRAY)
ret,thresh_img = cv2.threshold(digit,127,255,cv2.THRESH_BINARY)
plt.imshow(thresh_img,cmap=plt.cm.binary)
ret

#plt.imshow(thresh_img,cmap=plt.cm.binary)
for i in range(thresh_img.shape[1]):
  for j in range(thresh_img.shape[0]):
    if(thresh_img[j,i]==0):
      thresh_img[j,i]=255
    else:
      thresh_img[j,i]=0
plt.imshow(thresh_img,cmap=plt.cm.binary)

import tensorflow as tf
import tensorflow.keras as keras
datasets= tf.keras.datasets.mnist
(xtrain,ytrain),(xtest,ytest)=datasets.load_data()
xtrain=tf.keras.utils.normalize(xtrain,axis=1)
model=tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128,activation=tf.nn.sigmoid))
model.add(tf.keras.layers.Dense(128,activation=tf.nn.sigmoid))
model.add(tf.keras.layers.Dense(10,activation=tf.nn.softmax))
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(xtrain,ytrain,epochs=10)

import cv2
thresh_img=tf.keras.utils.normalize(thresh_img,axis=1)
dim=(28,28)
resized=cv2.resize(thresh_img,dim,interpolation = cv2.INTER_AREA)
plt.imshow(resized,cmap=plt.cm.binary)
#resized1=np.asarray(resized)
xtest1=np.asarray([resized])
xtest1.shape
predict=model.predict(xtest1)
print(np.argmax(predict))